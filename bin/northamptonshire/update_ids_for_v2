#!/usr/bin/env perl

# The migration from Alloy V1 to V2 causes the IDs to change. This takes a CSV
# with a mapping of old ids to new ones and applies it to the external_id, saving
# the old one in extra in case it's relevant.

use strict;
use warnings;
use v5.14;

BEGIN {
    use File::Basename qw(dirname);
    use File::Spec;
    my $d = dirname(File::Spec->rel2abs($0));
    require "$d/../../setenv.pl";
}

use FixMyStreet::DB;

use Getopt::Long;
use Text::CSV;

my $NEW_ID = 'alloy_item_id';
my $OLD_ID = 'res_id';
my $FMS_ID = 'fms_id';

my ($commit, $file);
GetOptions(
    'commit' => \$commit,
    'file=s' => \$file,
);

if (!$commit) {
    say "*** DRY RUN ***";
}

my $csv = Text::CSV->new({ binary => 1 });
open my $fh, "<:encoding(utf-8)", $file or die "Failed to open $file: $!\n";
$csv->header($fh);

my $count = 0;
my $northants = FixMyStreet::DB->resultset("Body")->find({ name => 'Northamptonshire County Council' });
if ($northants) {
    while (my $report = $csv->getline_hr( $fh ) ) {
        next unless $report->{$OLD_ID};
        my $p = FixMyStreet::DB->resultset('Problem')->to_body( $northants->id )->search({ id => $report->{$FMS_ID} })->first;
        next unless $p;
        if ( $p->external_id ne $report->{$OLD_ID} ) {
            warn "mismatch for " . $report->{$FMS_ID} . "\n";
            next;
        }

        if ($commit) {
            $p->set_extra_metadata('old_external_id', $p->external_id);
            $p->external_id($report->{$NEW_ID});
            $p->update;
        }
        say "Processed $count" if $count % 100 == 0;
        $count++;
    }

    say "updated $count rows";
} else {
    say STDERR "Could not find Northamptonshire";
}
